{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ЛР_5,6_AIS_2","provenance":[{"file_id":"1Rw3SYayepIbM-BItc2J86f2LC7tc5L4M","timestamp":1584113446508},{"file_id":"1xKqZtDBiaw4IxrN7NN9qov-IW5Rv5UU-","timestamp":1583831722810}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"u2uFP88tghcq","colab_type":"text"},"source":["#ЛР_5 Метод kNN своими руками"]},{"cell_type":"markdown","metadata":{"id":"Q38OnuCXlKZO","colab_type":"text"},"source":["Для дата-сета Blood сделайте предсказание совместимости доноров"]},{"cell_type":"markdown","metadata":{"id":"GQXCN7uelKZU","colab_type":"text"},"source":["Реализуйте самостоятельно метод kNN c эвклидовой метрикой для задачи классификации.  Ваша реализация может быть устроена следующим образом: можно для каждого классифицируемого объекта составлять список пар (расстояние до точки из обучающей выборки, метка класса в этой точке), затем сортировать этот список (по умолчанию сортировка будет сначала по первому элементу пары, затем по второму), а затем брать первые k элементов (с наименьшим расстоянием)."]},{"cell_type":"code","metadata":{"id":"UO3gYoZtJU3s","colab_type":"code","colab":{}},"source":["import random\n","import math\n","import operator\n","import numpy as np"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aHJBdb8TVpp4","colab_type":"code","outputId":"88bb8ad9-fdfd-428c-f966-5b0b1b3637bc","executionInfo":{"status":"ok","timestamp":1584268319200,"user_tz":-120,"elapsed":853,"user":{"displayName":"Дмитрий Маглеванный","photoUrl":"","userId":"05478673727076003372"}},"colab":{"base_uri":"https://localhost:8080/","height":158}},"source":["def euclideanMetric(x, y, featureNum):\n","    distance = 0\n","    for i in range(featureNum):\n","        distance += pow((x[i] - y[i]), 2)\n","    return math.sqrt(distance)\n","\n","def findNeighbors(trainingSet, testInstance, k):\n","  distances = []\n","  featureNum = len(testInstance) - 1\n","  for i in range(len(trainingSet)):\n","    dist = euclideanMetric(testInstance, trainingSet[i], featureNum)\n","    distances.append((trainingSet[i], dist))\n","    distances.sort(key=operator.itemgetter(1))\n","  neighbors = []\n","  predictionSet = {}\n","  for i in range(k):\n","    neighbors.append(distances[i][0])\n","    prediction = neighbors[i][-1]\n","    if prediction in predictionSet:\n","      predictionSet[prediction] += 1\n","    else:\n","      predictionSet[prediction] = 1\n","  sortedPredictions = sorted(predictionSet.items(), key = operator.itemgetter(1), reverse = True)\n","  return sortedPredictions[0][0]\n","\n","trainingSet = np.array([[0, 1, 1], [0, 3, 1], [1, 0, 0], [1, 1, 1], [1, 2, 0], [2, 1, 0], [2, 3, 1], [3, 0, 0], [3, 2, 0], [3, 3, 1]])\n","testSet = np.array([[1, 3, 1], [0, 0, 1], [2, 2, 1], [0, 2, 1], [2, 0, 0],  [3, 1, 0]])\n","\n","print ('Количество элементов обучающей выборки: ' + repr(len(trainingSet)))\n","print ('Количество элементов проверочной выборки: ' + repr(len(testSet)))\n","\n","k = 3\n","for i in range(len(testSet)):\n","\tneighbors = findNeighbors(trainingSet, testSet[i], k)\n","\tprint('Ожидаемый результат: ' + repr(neighbors) + ', Фактический результат:' + repr(testSet[i][-1]))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Количество элементов обучающей выборки: 10\n","Количество элементов проверочной выборки: 6\n","Ожидаемый результат: 1, Фактический результат:1\n","Ожидаемый результат: 1, Фактический результат:1\n","Ожидаемый результат: 0, Фактический результат:1\n","Ожидаемый результат: 1, Фактический результат:1\n","Ожидаемый результат: 0, Фактический результат:0\n","Ожидаемый результат: 0, Фактический результат:0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7WyuAy3KQPKi","colab_type":"text"},"source":["***Альтернативный вариант, к которому я пришёл.***"]},{"cell_type":"code","metadata":{"id":"x9Y_ub6KQYiO","colab_type":"code","outputId":"374c3200-b554-4f11-e856-c485a6119acb","executionInfo":{"status":"ok","timestamp":1584268322428,"user_tz":-120,"elapsed":645,"user":{"displayName":"Дмитрий Маглеванный","photoUrl":"","userId":"05478673727076003372"}},"colab":{"base_uri":"https://localhost:8080/","height":158}},"source":["def euclideanMetric(x, y, featureNum):\n","    distance = 0\n","    for i in range(featureNum):\n","        distance += pow((x[i] - y[i]), 2)\n","    return math.sqrt(distance)\n","\n","def findNeighbors(trainingSet, testInstance, k):\n","  distances = []\n","  featureNum = len(testInstance) - 1\n","  for i in range(len(trainingSet)):\n","    dist = euclideanMetric(testInstance, trainingSet[i], featureNum)\n","    distances.append((trainingSet[i], dist))\n","    distances.sort(key=operator.itemgetter(1))#достаточно компактная и удобная сортировка\n","  return distances[0][0][2]#для сравнения с фактическим результатом пришёл к такой форме записи. К сожалению, методом \"А почему бы и нет?\".\n","\n","trainingSet = np.array([[0, 1, 1], [0, 3, 1], [1, 0, 0], [1, 1, 1], [1, 2, 0], [2, 1, 0], [2, 3, 1], [3, 0, 0], [3, 2, 0], [3, 3, 1]])\n","testSet = np.array([[1, 3, 1], [0, 0, 1], [2, 2, 1], [0, 2, 1], [2, 0, 0],  [3, 1, 0]])\n","\n","print ('Количество элементов обучающей выборки: ' + repr(len(trainingSet)))\n","print ('Количество элементов проверочной выборки: ' + repr(len(testSet)))\n","\n","k = 3\n","for i in range(len(testSet)):\n","\tneighbors = findNeighbors(trainingSet, testSet[i], k)\n","\tprint('Ожидаемый результат: ' + repr(neighbors) + ', Фактический результат:' + repr(testSet[i][-1]))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Количество элементов обучающей выборки: 10\n","Количество элементов проверочной выборки: 6\n","Ожидаемый результат: 1, Фактический результат:1\n","Ожидаемый результат: 1, Фактический результат:1\n","Ожидаемый результат: 0, Фактический результат:1\n","Ожидаемый результат: 1, Фактический результат:1\n","Ожидаемый результат: 0, Фактический результат:0\n","Ожидаемый результат: 0, Фактический результат:0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"H88GikmxlKZY","colab_type":"text"},"source":["Проверьте правильность созданного вами метода существующим в библиотеке sklearn методом [NearestNeighbors](http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.NearestNeighbors.html):"]},{"cell_type":"code","metadata":{"id":"3GrWpN7ClKZZ","colab_type":"code","colab":{}},"source":["from sklearn import metrics\n","from sklearn.neighbors import KNeighborsClassifier"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Rm0kF7ixWUl1","colab_type":"code","outputId":"4eea4159-7ac5-41e9-92be-7f35263e2818","executionInfo":{"status":"ok","timestamp":1584268326020,"user_tz":-120,"elapsed":666,"user":{"displayName":"Дмитрий Маглеванный","photoUrl":"","userId":"05478673727076003372"}},"colab":{"base_uri":"https://localhost:8080/","height":123}},"source":["X = np.array([[0, 1], [0, 3], [1, 0], [1, 1], [1, 2], [2, 1], [2, 3], [3, 0], [3, 2], [3, 3]])\n","Y = np.array([1, 1, 0, 1, 0, 0, 1, 0, 0, 1])\n","Fact = np.array([1, 1, 1, 1, 0, 0])\n","model = KNeighborsClassifier()\n","model.fit(X, Y)\n","\n","print('Ожидаемый результат: ' , model.predict([[1, 3]]) , ', Фактический результат:' , repr(Fact[0]))\n","print('Ожидаемый результат: ' , model.predict([[0, 0]]) , ', Фактический результат:' , repr(Fact[1]))\n","print('Ожидаемый результат: ' , model.predict([[2, 2]]) , ', Фактический результат:' , repr(Fact[2]))\n","print('Ожидаемый результат: ' , model.predict([[0, 2]]) , ', Фактический результат:' , repr(Fact[3]))\n","print('Ожидаемый результат: ' , model.predict([[2, 0]]) , ', Фактический результат:' , repr(Fact[4]))\n","print('Ожидаемый результат: ' , model.predict([[3, 1]]) , ', Фактический результат:' , repr(Fact[5]))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Ожидаемый результат:  [1] , Фактический результат: 1\n","Ожидаемый результат:  [0] , Фактический результат: 1\n","Ожидаемый результат:  [0] , Фактический результат: 1\n","Ожидаемый результат:  [1] , Фактический результат: 1\n","Ожидаемый результат:  [0] , Фактический результат: 0\n","Ожидаемый результат:  [0] , Фактический результат: 0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"q3uReb9OolGk","colab_type":"code","outputId":"8f6475bf-5b01-42bb-928f-4e8cdad86c0b","executionInfo":{"status":"ok","timestamp":1584268385399,"user_tz":-120,"elapsed":777,"user":{"displayName":"Дмитрий Маглеванный","photoUrl":"","userId":"05478673727076003372"}},"colab":{"base_uri":"https://localhost:8080/","height":212}},"source":["expected = Y\n","predicted = model.predict(X)\n","\n","print(metrics.classification_report(expected, predicted))\n","print(metrics.confusion_matrix(expected, predicted))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.57      0.80      0.67         5\n","           1       0.67      0.40      0.50         5\n","\n","    accuracy                           0.60        10\n","   macro avg       0.62      0.60      0.58        10\n","weighted avg       0.62      0.60      0.58        10\n","\n","[[4 1]\n"," [3 2]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9l3tt61GgSLx","colab_type":"text"},"source":["#ЛР_6"]},{"cell_type":"markdown","metadata":{"id":"bvFhZoxvgPD_","colab_type":"text"},"source":["Сделать рекомендательную систему любых товаров/услуг на основе метода kNN\n"]},{"cell_type":"code","metadata":{"id":"d9_pkDFZv8yD","colab_type":"code","colab":{}},"source":["from sklearn import metrics\n","from sklearn.neighbors import KNeighborsClassifier\n","import numpy as np\n","import operator"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rJ9Cfdjmv9Z9","colab_type":"code","outputId":"904d878f-410a-4ff6-8b08-b9c4051dfff1","executionInfo":{"status":"ok","timestamp":1584527071775,"user_tz":-120,"elapsed":909,"user":{"displayName":"Дмитрий Маглеванный","photoUrl":"","userId":"05478673727076003372"}},"colab":{"base_uri":"https://localhost:8080/","height":710}},"source":["#рекомендательная система подушек\n","pillowArr = np.array([[10, 7, 6, 10, 9, 10], [10, 9, 10, 5, 6, 9], [8, 5, 7, 9, 6, 5], [7, 5, 6, 10, 7, 9], [6, 8, 8, 7, 6, 7], [8, 6, 7, 9, 5, 9], [10, 9, 5, 9, 8, 9], [6, 8, 9, 4, 10, 7], [9, 6, 10, 5, 6, 5], [8, 7, 7, 7, 5, 7], [8, 6, 9, 6, 7, 6], [5, 6, 8, 9, 9, 9]])\n","testPillow = np.array([[7, 8, 9, 6, 8], [6, 5, 7, 9, 6], [9, 8, 10, 6, 9]])\n","def ForecastPillow(pillowArr, testPillow, k):\n","  distanceArr = []\n","  for i in range(len(pillowArr)):\n","    weight = np.correlate(testPillow, pillowArr[:,0:-1][i]) #достаём из массива pillowArr первые 5 элементов из каждого набора, как, например, pillowArr[0] = [10, 7, 6, 10, 9], после чего проводим корреляцию.\n","    print(weight)\n","    distanceArr.append((pillowArr[i], weight))\n","  distanceArr.sort(key=operator.itemgetter(1), reverse=True)\n","\n","  Forecast_formula = 0\n","  Numerator = 0\n","  Denominator = 0\n","  for i in range(k):\n","    Numerator += ((distanceArr[i][0][-1]) - np.average(distanceArr[i][0][:-1])) * distanceArr[i][1]\n","    Denominator += np.abs(distanceArr[i][1])\n","  Forecast_formula = np.average(testPillow) * (Numerator / Denominator)\n","  return Forecast_formula\n","\n","k = 3\n","\n","for i in range(k):\n","  print('Ожидаемый результат: ' , ForecastPillow(pillowArr, testPillow[i], k))"],"execution_count":14,"outputs":[{"output_type":"stream","text":["[312]\n","[310]\n","[261]\n","[259]\n","[268]\n","[261]\n","[305]\n","[291]\n","[279]\n","[257]\n","[277]\n","[281]\n","Ожидаемый результат:  [8.63464941]\n","[281]\n","[256]\n","[239]\n","[241]\n","[231]\n","[238]\n","[269]\n","[235]\n","[235]\n","[225]\n","[237]\n","[251]\n","Ожидаемый результат:  [7.54004963]\n","[347]\n","[346]\n","[290]\n","[286]\n","[294]\n","[289]\n","[338]\n","[322]\n","[313]\n","[285]\n","[309]\n","[308]\n","Ожидаемый результат:  [9.54552861]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QRPt5NmpJYHD","colab_type":"code","outputId":"567948d1-a743-456c-97bc-88a6e4167eb5","executionInfo":{"status":"ok","timestamp":1584459569224,"user_tz":-120,"elapsed":1059,"user":{"displayName":"Дмитрий Маглеванный","photoUrl":"","userId":"05478673727076003372"}},"colab":{"base_uri":"https://localhost:8080/","height":312}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","a = [10, 7, 6, 10, 9]\n","v = [7, 8, 9, 6, 8]\n","\n","c = np.correlate(a, v, 'full') #на данном примере можно заметить, что 312 - это пиковое значение в данной корреляции.\n","print(c)\n","\n","fig, axes = plt.subplots(3, 1)\n","\n","axes[0].plot(a, color = 'purple')\n","axes[0].set_title(r'Сигнал $\\mathbf{a}$')\n","\n","axes[1].plot(v, color = 'orangered')\n","axes[1].set_title(r'Сигнал $\\mathbf{v}$')\n","\n","axes[2].plot(c, color = 'darkred')\n","axes[2].set_title(r'Кросс-корреляция $\\mathbf{C_{av}}$')\n","\n","fig.suptitle('Взаимнокорреляционная функция двух сигналов')\n","fig.subplots_adjust(hspace=0.6)\n","\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[ 80 116 180 259 312 241 203 142  63]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nrNAbY0zA/Q/eZjkPyYHCDQAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 3 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"zug7-_GuJ8aA","colab_type":"text"},"source":["**Тестировка:**"]},{"cell_type":"code","metadata":{"id":"knUdDMZjKLmA","colab_type":"code","colab":{}},"source":["import random\n","import math\n","import operator\n","import numpy as np"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0G5sysTBJ7lF","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":70},"outputId":"6f90e4f6-5e34-4b51-bb9e-730c915f8ed7","executionInfo":{"status":"ok","timestamp":1584526886739,"user_tz":-120,"elapsed":1183,"user":{"displayName":"Дмитрий Маглеванный","photoUrl":"","userId":"05478673727076003372"}}},"source":["#рекомендательная система подушек\n","pillowArr = np.array([[8, 6, 9, 6, 7, 6], [6, 8, 9, 4, 10, 7]])\n","testPillow = np.array([[7, 8, 9, 6, 8]])\n","def ForecastPillow(pillowArr, testPillow):\n","  distanceArr = []\n","  for i in range(len(pillowArr)):\n","    weight = np.corrcoef(testPillow, pillowArr[:,0:-1][i])[0][1] #достаём из массива pillowArr первые 5 элементов из каждого набора, как, например, pillowArr[0] = [10, 7, 6, 10, 9], после чего проводим корреляцию.\n","    print(weight)\n","    distanceArr.append((pillowArr[i], weight))\n","  distanceArr.sort(key=operator.itemgetter(1), reverse=True)\n","\n","  Forecast_formula = 0\n","  Numerator = 0\n","  Denominator = 0\n","  for i in range(2):\n","    Numerator += distanceArr[i][0][-1] - (np.average(distanceArr[i][0][:-1]) * distanceArr[i][1])\n","    Denominator += np.abs(distanceArr[i][1])\n","  Forecast_formula = np.average(testPillow) + (Numerator / Denominator)\n","  return Forecast_formula\n","\n","print('Ожидаемый результат: ' , ForecastPillow(pillowArr, testPillow))"],"execution_count":9,"outputs":[{"output_type":"stream","text":["0.5717718748968655\n","0.8922373748933065\n","Ожидаемый результат:  9.157835735572693\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OrP-l8x_Kn_o","colab_type":"code","outputId":"b095d9e4-8c1a-493d-f5c2-699b05c56725","executionInfo":{"status":"ok","timestamp":1584526895203,"user_tz":-120,"elapsed":807,"user":{"displayName":"Дмитрий Маглеванный","photoUrl":"","userId":"05478673727076003372"}},"colab":{"base_uri":"https://localhost:8080/","height":710}},"source":["#рекомендательная система подушек\n","pillowArr = np.array([[10, 7, 6, 10, 9, 10], [10, 9, 10, 5, 6, 9], [8, 5, 7, 9, 6, 5], [7, 5, 6, 10, 7, 9], [6, 8, 8, 7, 6, 7], [8, 6, 7, 9, 5, 9], [10, 9, 5, 9, 8, 9], [6, 8, 9, 4, 10, 7], [9, 6, 10, 5, 6, 5], [8, 7, 7, 7, 5, 7], [8, 6, 9, 6, 7, 6], [5, 6, 8, 9, 9, 9]])\n","testPillow = np.array([[7, 8, 9, 6, 8], [6, 5, 7, 9, 6], [9, 8, 10, 6, 9]])\n","def ForecastPillow(pillowArr, testPillow, k):\n","  distanceArr = []\n","  for i in range(len(pillowArr)):\n","    weight = np.corrcoef(testPillow, pillowArr[:,0:-1][i])[0][1] #достаём из массива pillowArr первые 5 элементов из каждого набора, как, например, pillowArr[0] = [10, 7, 6, 10, 9], после чего проводим корреляцию.\n","    print(weight)\n","    distanceArr.append((pillowArr[i], weight))\n","  distanceArr.sort(key=operator.itemgetter(1), reverse=True)\n","\n","  Forecast_formula = 0\n","  Numerator = 0\n","  Denominator = 0\n","  for i in range(k):\n","    Numerator += distanceArr[i][0][-1] - (np.average(distanceArr[i][0][:-1]) * distanceArr[i][1])\n","    Denominator += np.abs(distanceArr[i][1])\n","  Forecast_formula = np.average(testPillow) + (Numerator / Denominator)\n","  return Forecast_formula\n","\n","\n","k = 3\n","\n","for i in range(k):\n","  print('Ожидаемый результат: ' , ForecastPillow(pillowArr, testPillow[i], k))"],"execution_count":10,"outputs":[{"output_type":"stream","text":["-0.8690481892534816\n","0.5609681940050742\n","-0.6933752452815363\n","-0.820412654142367\n","0.4385290096535146\n","-0.6933752452815363\n","-0.7523352417694629\n","0.8922373748933065\n","0.5461515409923461\n","-0.2802242691589025\n","0.5717718748968655\n","-0.024140227479263376\n","Ожидаемый результат:  10.95457582271142\n","0.3448281541042982\n","-0.5623215571155333\n","0.8340576562282991\n","0.8811342210628018\n","0.0\n","0.7298004491997617\n","-0.13711823403821222\n","-0.6297235299224027\n","-0.19769719601855393\n","0.09028938981432692\n","-0.07585826061362608\n","0.6170609073445336\n","Ожидаемый результат:  9.006982488575083\n","-0.5263166562644551\n","0.7029019463944166\n","-0.41702882811414954\n","-0.7049073768502415\n","0.0\n","-0.5212860351426869\n","-0.5484729361528488\n","0.7666199494707508\n","0.8059962606910276\n","-0.09028938981432692\n","0.8344408667498866\n","-0.25408390302421974\n","Ожидаемый результат:  8.614313595340137\n"],"name":"stdout"}]}]}